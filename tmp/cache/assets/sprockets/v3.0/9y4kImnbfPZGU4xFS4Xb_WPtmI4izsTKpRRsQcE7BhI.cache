I"2(function() {
  this.draw_workflow = function() {
    if ($('svg#graphContainer').length > 0) {
      return d3.json($('#data_bundle').attr('data-url'), function(error, links) {
        var force, height, node, nodes, path, svgContainer, tick, width;
        tick = function() {
          path.attr('d', function(d) {
            var dr, dx, dy;
            dx = d.target.x - d.source.x;
            dy = d.target.y - d.source.y;
            dr = Math.sqrt(dx * dx + dy * dy);
            return 'M' + d.source.x + ',' + d.source.y + 'A' + dr + ',' + dr + ' 0 0,1 ' + d.target.x + ',' + d.target.y;
          });
          node.attr('transform', function(d) {
            return 'translate(' + d.x + ',' + d.y + ')';
          });
        };
        nodes = {};
        links.workflow.forEach(function(link) {
          link.source = nodes[link.source] || (nodes[link.source] = {
            name: link.source,
            file_content: link.file_content
          });
          link.target = nodes[link.target] || (nodes[link.target] = {
            name: link.target,
            file_content: link.file_content
          });
          link.value = +link.value;
        });
        width = 960;
        height = 900;
        force = d3.layout.force().nodes(d3.values(nodes)).links(links).size([width, height]).linkDistance(100).charge(-500).on('tick', tick).start();
        svgContainer = d3.select('svg#graphContainer').attr('width', width).attr('height', height);
        svgContainer.append('svg:defs').selectAll('marker').data(['end']).enter().append('svg:marker').attr('id', String).attr('viewBox', '0 -5 10 10').attr('refX', 15).attr('refY', -1.5).attr('markerWidth', 6).attr('markerHeight', 6).attr('orient', 'auto').append('svg:path').attr('d', 'M0,-5L10,0L0,5');
        path = svgContainer.append('svg:g').selectAll('path').data(force.links()).enter().append('svg:path').attr('class', 'link').attr('marker-end', 'url(#end)');
        node = svgContainer.selectAll('.node').data(force.nodes()).enter().append('g').attr('class', 'node').attr('id', function(d) {
          return d.name;
        }).call(force.drag);
        node.append('circle').attr('r', 5);
        node.append('text').attr('x', 12).attr('dy', '.35em').text(function(d) {
          return d.name;
        });
        node.append('text').attr('class', 'file_content').attr('visibility', 'hidden').text(function(d) {
          return d.file_content;
        });
        node.on('click', function(d) {
          var rect, text;
          rect = svgContainer.append('rect').transition().duration(500).attr('width', 250).attr('height', 300).attr('x', 10).attr('y', 10).style('fill', 'white').attr('stroke', 'black');
          return text = svgContainer.append('text').text(d.file_content).attr('x', 50).attr('y', 150).attr('fill', 'black');
        });
      });
    }
  };

}).call(this);
:ET